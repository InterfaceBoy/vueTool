{"remainingRequest":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/vueTool/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/index.js","dependencies":[{"path":"/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/index.js","mtime":1576230904680},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1567574714613}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/vueTool/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/vueTool/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 15:37:03\n * @LastEditors: 何元鹏\n * @LastEditTime: 2019-10-16 15:37:03\n * @Description: file content\n */\nimport getConfig from \"@/utils/getConfig\";\nimport HttpRequest from \"./httpRequest\"; // axios.defaults.withCredentials = true;\n\nimport notice from \"@/utils/notice\";\nimport axios from \"axios\";\nvar instanceMap = {\n  // 系统基础服务\n  base: null\n};\n\nvar getInstance =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var instanceName,\n        _ref2,\n        config,\n        API,\n        API_FILE_DIR,\n        BASEURL,\n        _args = arguments;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            instanceName = _args.length > 0 && _args[0] !== undefined ? _args[0] : \"base\";\n            _context.next = 3;\n            return getConfig();\n\n          case 3:\n            _ref2 = _context.sent;\n            config = _ref2.config;\n            API = config.API, API_FILE_DIR = config.API_FILE_DIR;\n            BASEURL = API + API_FILE_DIR || \"\"; // 避免重复实例化\n\n            !instanceMap.base && (instanceMap.base = new HttpRequest({\n              BASEURL: BASEURL\n            }));\n            return _context.abrupt(\"return\", instanceMap[instanceName]);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getInstance() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * get方法\n * @param {String} url [请求的url地址]\n * @param {String} serviceName [请求服务名和服务描述(和swagger对应)]\n * @param {Object} params [请求时携带的参数] (可选)\n */\n\n\nvar get = function get(axiosInstance, url) {\n  var serviceName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"未知服务\";\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var showError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return new Promise(function (resolve, reject) {\n    axiosInstance({\n      url: url,\n      method: \"get\",\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (error) {\n      showError && notice.error(error);\n      reject(error);\n      throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u63A5\\u53E3\\u5931\\u8D25\"));\n    });\n  });\n};\n/**\n * post方法\n * @param {String} url [请求的url地址]\n * @param {String} serviceName [请求服务名和服务描述(和swagger对应)]\n * @param {Object} params [请求时携带的参数] (可选)\n * @param {Object} headers [请求时的请求头信息] （可选）\n */\n\n\nvar post = function post(axiosInstance, url) {\n  var serviceName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"未知服务\";\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var showError = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  return new Promise(function (resolve, reject) {\n    axiosInstance({\n      url: url,\n      method: \"post\",\n      // data: qs.stringify(params)\n      data: params,\n      headers: headers\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (error) {\n      showError && notice.error(error);\n      reject(error);\n      throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u63A5\\u53E3\\u5931\\u8D25\"));\n    });\n  });\n};\n/**\n * put方法\n * @param {string} url [请求的url地址]\n * @param {string} serviceName [请求服务名与服务描述(与swagger一致)]\n * @param {Object} params [请求是携带的参数(可选)]\n */\n\n\nvar put = function put(axiosInstance, url) {\n  var serviceName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"未知服务\";\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var showError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return new Promise(function (resolve, reject) {\n    axiosInstance({\n      url: url,\n      method: \"put\",\n      data: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (error) {\n      showError && notice.error(error);\n      reject(error);\n      throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u63A5\\u53E3\\u5931\\u8D25\"));\n    });\n  });\n};\n/**\n * delete方法\n * @param {string} url [请求url]\n * @param {string} serviceName [请求服务名和服务描述(与swagger一致)]\n * @param {Object} params [请求携带参数(可选)]\n */\n\n\nvar Delete = function Delete(axiosInstance, url) {\n  var serviceName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"未知服务\";\n  var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var showError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return new Promise(function (resolve, reject) {\n    axiosInstance({\n      url: url,\n      method: \"delete\",\n      data: params,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      }\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (error) {\n      showError && notice.error(error);\n      reject(error);\n      throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u63A5\\u53E3\\u5931\\u8D25\"));\n    });\n  });\n}; // 基础get请求\n\n\nexport var GET =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(url, serviceName, params, showError) {\n    var baseService;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getInstance();\n\n          case 2:\n            baseService = _context2.sent;\n            return _context2.abrupt(\"return\", get(baseService, url, serviceName, params, showError));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function GET(_x, _x2, _x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // 单点登录get请求（为了区分其他基础的get请求）\n\nexport var LOGINGET =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee3(url, serviceName, params) {\n    var baseService;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getInstance(\"authentication\");\n\n          case 2:\n            baseService = _context3.sent;\n            return _context3.abrupt(\"return\", get(baseService, url, serviceName, params));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function LOGINGET(_x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // 基础post请求\n\nexport var POST =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee4(url, serviceName, params, headers, showError) {\n    var baseService;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return getInstance();\n\n          case 2:\n            baseService = _context4.sent;\n            return _context4.abrupt(\"return\", post(baseService, url, serviceName, params, headers, showError));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function POST(_x8, _x9, _x10, _x11, _x12) {\n    return _ref5.apply(this, arguments);\n  };\n}(); // 基础put请求\n\nexport var PUT =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee5(url, serviceName, params) {\n    var baseService;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return getInstance();\n\n          case 2:\n            baseService = _context5.sent;\n            return _context5.abrupt(\"return\", put(baseService, url, serviceName, params));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function PUT(_x13, _x14, _x15) {\n    return _ref6.apply(this, arguments);\n  };\n}(); // 基础delete请求\n\nexport var DELETE =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6(url, serviceName, params) {\n    var baseService;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return getInstance();\n\n          case 2:\n            baseService = _context6.sent;\n            return _context6.abrupt(\"return\", Delete(baseService, url, serviceName, params));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function DELETE(_x16, _x17, _x18) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var JGET =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee7(url, serviceName) {\n    var res;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return HttpRequest.get(url);\n\n          case 3:\n            res = _context7.sent;\n            return _context7.abrupt(\"return\", res.data);\n\n          case 7:\n            _context7.prev = 7;\n            _context7.t0 = _context7[\"catch\"](0);\n            throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u5931\\u8D25\"));\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 7]]);\n  }));\n\n  return function JGET(_x19, _x20) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\nvar requestForDownload =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee8(method, url, serviceName, params, headers) {\n    var _ref10, config, API, API_FILE_DIR, BASEURL;\n\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getConfig();\n\n          case 2:\n            _ref10 = _context8.sent;\n            config = _ref10.config;\n            API = config.API, API_FILE_DIR = config.API_FILE_DIR;\n            BASEURL = API + API_FILE_DIR || \"\";\n            return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var _axios;\n\n              var dataKey = method === \"get\" ? \"params\" : \"data\";\n              axios((_axios = {\n                baseURL: BASEURL,\n                url: url,\n                method: method\n              }, _defineProperty(_axios, dataKey, params), _defineProperty(_axios, \"headers\", headers), _defineProperty(_axios, \"responseType\", \"blob\"), _axios)).then(function (res) {\n                var headers = res.headers,\n                    data = res.data;\n                var type = data.type;\n\n                if (type.includes(\"application/json\")) {\n                  // 如果是json类型，则说明下载出错，需要提取错误信息\n                  var fileReader = new FileReader();\n\n                  fileReader.onload = function (e) {\n                    var _JSON$parse = JSON.parse(e.target.result),\n                        message = _JSON$parse.message;\n\n                    reject(message);\n                    notice.error(message);\n                  };\n\n                  fileReader.readAsText(data);\n                } else {\n                  var reg = /filename=(\\S.*?\\.\\w+)$/;\n                  var fileInfo = headers[\"content-disposition\"];\n                  var filename = fileInfo && fileInfo.match(reg);\n                  resolve({\n                    blob: data,\n                    name: filename ? decodeURI(filename[1]) : \"DistTemplate\"\n                  });\n                }\n              }).catch(function (error) {\n                reject(error);\n                throw new Error(\"\\u8BF7\\u6C42---\".concat(serviceName, \"---\\u63A5\\u53E3\\u5931\\u8D25\"));\n              });\n            }));\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n\n  return function requestForDownload(_x21, _x22, _x23, _x24, _x25) {\n    return _ref9.apply(this, arguments);\n  };\n}(); // 针对于下载的post请求\n\n\nexport var DOWNLOAD_POST =\n/*#__PURE__*/\nfunction () {\n  var _ref11 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee9(url, serviceName, params, headers) {\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            return _context9.abrupt(\"return\", requestForDownload(\"post\", url, serviceName, params, headers));\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function DOWNLOAD_POST(_x26, _x27, _x28, _x29) {\n    return _ref11.apply(this, arguments);\n  };\n}(); // 针对于下载文件接口的GET请求\n\nexport var DOWNLOAD_GET =\n/*#__PURE__*/\nfunction () {\n  var _ref12 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee10(url, serviceName, params, headers) {\n    return regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            return _context10.abrupt(\"return\", requestForDownload(\"get\", url, serviceName, params, headers));\n\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n\n  return function DOWNLOAD_GET(_x30, _x31, _x32, _x33) {\n    return _ref12.apply(this, arguments);\n  };\n}();",{"version":3,"sources":["/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/index.js"],"names":["getConfig","HttpRequest","notice","axios","instanceMap","base","getInstance","instanceName","config","API","API_FILE_DIR","BASEURL","get","axiosInstance","url","serviceName","params","showError","Promise","resolve","reject","method","then","res","data","catch","error","Error","post","headers","put","Delete","GET","baseService","LOGINGET","POST","PUT","DELETE","JGET","requestForDownload","dataKey","baseURL","type","includes","fileReader","FileReader","onload","e","JSON","parse","target","result","message","readAsText","reg","fileInfo","filename","match","blob","name","decodeURI","DOWNLOAD_POST","DOWNLOAD_GET"],"mappings":"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","sourcesContent":["/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 15:37:03\n * @LastEditors: 何元鹏\n * @LastEditTime: 2019-10-16 15:37:03\n * @Description: file content\n */\nimport getConfig from \"@/utils/getConfig\";\nimport HttpRequest from \"./httpRequest\";\n// axios.defaults.withCredentials = true;\nimport notice from \"@/utils/notice\";\n\nimport axios from \"axios\";\n\nconst instanceMap = {\n  // 系统基础服务\n  base: null\n};\n\nconst getInstance = async (instanceName = \"base\") => {\n  const { config } = await getConfig();\n  const { API, API_FILE_DIR } = config;\n  const BASEURL = API + API_FILE_DIR || \"\";\n  // 避免重复实例化\n  !instanceMap.base &&\n    (instanceMap.base = new HttpRequest({\n      BASEURL\n    }));\n  return instanceMap[instanceName];\n};\n\n/**\n * get方法\n * @param {String} url [请求的url地址]\n * @param {String} serviceName [请求服务名和服务描述(和swagger对应)]\n * @param {Object} params [请求时携带的参数] (可选)\n */\nconst get = (\n  axiosInstance,\n  url,\n  serviceName = \"未知服务\",\n  params = {},\n  showError = true\n) => {\n  return new Promise((resolve, reject) => {\n    axiosInstance({\n      url,\n      method: \"get\",\n      params\n    })\n      .then(res => {\n        resolve(res.data);\n      })\n      .catch(error => {\n        showError && notice.error(error);\n        reject(error);\n        throw new Error(`请求---${serviceName}---接口失败`);\n      });\n  });\n};\n\n/**\n * post方法\n * @param {String} url [请求的url地址]\n * @param {String} serviceName [请求服务名和服务描述(和swagger对应)]\n * @param {Object} params [请求时携带的参数] (可选)\n * @param {Object} headers [请求时的请求头信息] （可选）\n */\nconst post = (\n  axiosInstance,\n  url,\n  serviceName = \"未知服务\",\n  params = {},\n  headers = {},\n  showError = true\n) => {\n  return new Promise((resolve, reject) => {\n    axiosInstance({\n      url,\n      method: \"post\",\n      // data: qs.stringify(params)\n      data: params,\n      headers: headers\n    })\n      .then(res => {\n        resolve(res.data);\n      })\n      .catch(error => {\n        showError && notice.error(error);\n        reject(error);\n        throw new Error(`请求---${serviceName}---接口失败`);\n      });\n  });\n};\n\n/**\n * put方法\n * @param {string} url [请求的url地址]\n * @param {string} serviceName [请求服务名与服务描述(与swagger一致)]\n * @param {Object} params [请求是携带的参数(可选)]\n */\nconst put = (\n  axiosInstance,\n  url,\n  serviceName = \"未知服务\",\n  params = {},\n  showError = true\n) => {\n  return new Promise((resolve, reject) => {\n    axiosInstance({\n      url,\n      method: \"put\",\n      data: params\n    })\n      .then(res => {\n        resolve(res.data);\n      })\n      .catch(error => {\n        showError && notice.error(error);\n        reject(error);\n        throw new Error(`请求---${serviceName}---接口失败`);\n      });\n  });\n};\n\n/**\n * delete方法\n * @param {string} url [请求url]\n * @param {string} serviceName [请求服务名和服务描述(与swagger一致)]\n * @param {Object} params [请求携带参数(可选)]\n */\n\nconst Delete = (\n  axiosInstance,\n  url,\n  serviceName = \"未知服务\",\n  params = {},\n  showError = true\n) => {\n  return new Promise((resolve, reject) => {\n    axiosInstance({\n      url,\n      method: \"delete\",\n      data: params,\n      headers: {\n        \"Content-Type\": \"application/json;charset=UTF-8\"\n      }\n    })\n      .then(res => {\n        resolve(res.data);\n      })\n      .catch(error => {\n        showError && notice.error(error);\n        reject(error);\n        throw new Error(`请求---${serviceName}---接口失败`);\n      });\n  });\n};\n// 基础get请求\nexport const GET = async (url, serviceName, params, showError) => {\n  const baseService = await getInstance();\n  return get(baseService, url, serviceName, params, showError);\n};\n\n// 单点登录get请求（为了区分其他基础的get请求）\nexport const LOGINGET = async (url, serviceName, params) => {\n  const baseService = await getInstance(\"authentication\");\n  return get(baseService, url, serviceName, params);\n};\n\n// 基础post请求\nexport const POST = async (url, serviceName, params, headers, showError) => {\n  const baseService = await getInstance();\n  return post(baseService, url, serviceName, params, headers, showError);\n};\n\n// 基础put请求\nexport const PUT = async (url, serviceName, params) => {\n  const baseService = await getInstance();\n  return put(baseService, url, serviceName, params);\n};\n\n// 基础delete请求\nexport const DELETE = async (url, serviceName, params) => {\n  const baseService = await getInstance();\n  return Delete(baseService, url, serviceName, params);\n};\n\nexport const JGET = async (url, serviceName) => {\n  try {\n    const res = await HttpRequest.get(url);\n    return res.data;\n  } catch (error) {\n    throw new Error(`请求---${serviceName}---失败`);\n  }\n};\n\nconst requestForDownload = async (\n  method,\n  url,\n  serviceName,\n  params,\n  headers\n) => {\n  const { config } = await getConfig();\n  const { API, API_FILE_DIR } = config;\n  const BASEURL = API + API_FILE_DIR || \"\";\n  return new Promise((resolve, reject) => {\n    const dataKey = method === \"get\" ? \"params\" : \"data\";\n    axios({\n      baseURL: BASEURL,\n      url,\n      method: method,\n      [dataKey]: params,\n      headers: headers,\n      responseType: \"blob\"\n    })\n      .then(res => {\n        const { headers, data } = res;\n        const type = data.type;\n        if (type.includes(\"application/json\")) {\n          // 如果是json类型，则说明下载出错，需要提取错误信息\n          const fileReader = new FileReader();\n          fileReader.onload = e => {\n            const { message } = JSON.parse(e.target.result);\n            reject(message);\n            notice.error(message);\n          };\n          fileReader.readAsText(data);\n        } else {\n          const reg = /filename=(\\S.*?\\.\\w+)$/;\n          const fileInfo = headers[\"content-disposition\"];\n          const filename = fileInfo && fileInfo.match(reg);\n          resolve({\n            blob: data,\n            name: filename ? decodeURI(filename[1]) : \"DistTemplate\"\n          });\n        }\n      })\n      .catch(error => {\n        reject(error);\n        throw new Error(`请求---${serviceName}---接口失败`);\n      });\n  });\n};\n\n// 针对于下载的post请求\nexport const DOWNLOAD_POST = async (url, serviceName, params, headers) => {\n  return requestForDownload(\"post\", url, serviceName, params, headers);\n};\n// 针对于下载文件接口的GET请求\nexport const DOWNLOAD_GET = async (url, serviceName, params, headers) => {\n  return requestForDownload(\"get\", url, serviceName, params, headers);\n};\n"]}]}