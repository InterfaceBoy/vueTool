{"remainingRequest":"/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/src/utils/base.js","dependencies":[{"path":"/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/src/utils/base.js","mtime":1584970741675},{"path":"/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1567574714613}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\n/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 13:59:26\n * @LastEditors: 何元鹏\n * @LastEditTime: 2020-03-23 21:38:59\n * @Description: file content\n */\n\n/**\n * 递归tree数组，按照liquor-tree组件特定的格式返回树数据\n * @param {Array} treeData\n * @param {String} text字段的别名\n * @param {String} childrenStr字段的别名\n * @returns {Array} data\n */\nexport var convertTreeArray = function convertTreeArray(treeData) {\n  function convertTree(data) {\n    var result = []; // 遍历 tree\n\n    data.forEach(function (item) {\n      var data = {\n        value: item.id,\n        text: item.attrs.attrs.qymc.name\n      };\n      var text = item.attrs.attrs.qymc.name;\n      var isBatch = item.count > 0 ? true : false;\n      var children = []; // 如果有子节点，递归\n\n      result.push({\n        text: text,\n        isBatch: isBatch,\n        children: children,\n        checkbox: true,\n        filter: {\n          plainList: true\n        },\n        data: data,\n        state: {\n          expanded: false\n        }\n      });\n    });\n    console.log(result);\n    return result;\n  }\n\n  return convertTree(treeData);\n};\nvar cnum = [\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"];\nexport function numberToChineseCharacter(number) {\n  var s = \"\";\n  number = \"\" + number; // 数字转为字符串\n\n  for (var i = 0; i < number.length; i++) {\n    s += cnum[parseInt(number.charAt(i))];\n  }\n\n  return s;\n}",{"version":3,"sources":["/Users/heyuanpeng/个人项目/ArtisticCreation/artistic-creation/src/utils/base.js"],"names":["convertTreeArray","treeData","convertTree","data","result","forEach","item","value","id","text","attrs","qymc","name","isBatch","count","children","push","checkbox","filter","plainList","state","expanded","console","log","cnum","numberToChineseCharacter","number","s","i","length","parseInt","charAt"],"mappings":";;;AAAA;;;;;;;;AAQA;;;;;;;AAOA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,QAAQ,EAAI;AAC1C,WAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAMC,MAAM,GAAG,EAAf,CADyB,CAEzB;;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnB,UAAMH,IAAI,GAAG;AAAEI,QAAAA,KAAK,EAAED,IAAI,CAACE,EAAd;AAAkBC,QAAAA,IAAI,EAAEH,IAAI,CAACI,KAAL,CAAWA,KAAX,CAAiBC,IAAjB,CAAsBC;AAA9C,OAAb;AACA,UAAMH,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWA,KAAX,CAAiBC,IAAjB,CAAsBC,IAAnC;AACA,UAAMC,OAAO,GAAGP,IAAI,CAACQ,KAAL,GAAa,CAAb,GAAiB,IAAjB,GAAwB,KAAxC;AACA,UAAIC,QAAQ,GAAG,EAAf,CAJmB,CAKnB;;AACAX,MAAAA,MAAM,CAACY,IAAP,CAAY;AACVP,QAAAA,IAAI,EAAJA,IADU;AAEVI,QAAAA,OAAO,EAAEA,OAFC;AAGVE,QAAAA,QAAQ,EAAEA,QAHA;AAIVE,QAAAA,QAAQ,EAAE,IAJA;AAKVC,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AADL,SALE;AAQVhB,QAAAA,IAAI,EAAJA,IARU;AASViB,QAAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE;AADL;AATG,OAAZ;AAaD,KAnBD;AAoBAC,IAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AACA,WAAOA,MAAP;AACD;;AACD,SAAOF,WAAW,CAACD,QAAD,CAAlB;AACD,CA5BM;AA8BP,IAAIuB,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAAX;AACA,OAAO,SAASC,wBAAT,CAAkCC,MAAlC,EAA0C;AAC/C,MAAIC,CAAC,GAAG,EAAR;AACAD,EAAAA,MAAM,GAAG,KAAKA,MAAd,CAF+C,CAEzB;;AACtB,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCD,IAAAA,CAAC,IAAIH,IAAI,CAACM,QAAQ,CAACJ,MAAM,CAACK,MAAP,CAAcH,CAAd,CAAD,CAAT,CAAT;AACD;;AACD,SAAOD,CAAP;AACD","sourcesContent":["/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 13:59:26\n * @LastEditors: 何元鹏\n * @LastEditTime: 2020-03-23 21:38:59\n * @Description: file content\n */\n\n/**\n * 递归tree数组，按照liquor-tree组件特定的格式返回树数据\n * @param {Array} treeData\n * @param {String} text字段的别名\n * @param {String} childrenStr字段的别名\n * @returns {Array} data\n */\nexport const convertTreeArray = treeData => {\n  function convertTree(data) {\n    const result = [];\n    // 遍历 tree\n    data.forEach(item => {\n      const data = { value: item.id, text: item.attrs.attrs.qymc.name };\n      const text = item.attrs.attrs.qymc.name;\n      const isBatch = item.count > 0 ? true : false;\n      let children = [];\n      // 如果有子节点，递归\n      result.push({\n        text,\n        isBatch: isBatch,\n        children: children,\n        checkbox: true,\n        filter: {\n          plainList: true\n        },\n        data,\n        state: {\n          expanded: false\n        }\n      });\n    });\n    console.log(result);\n    return result;\n  }\n  return convertTree(treeData);\n};\n\nlet cnum = [\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"];\nexport function numberToChineseCharacter(number) {\n  let s = \"\";\n  number = \"\" + number; // 数字转为字符串\n  for (let i = 0; i < number.length; i++) {\n    s += cnum[parseInt(number.charAt(i))];\n  }\n  return s;\n}\n"]}]}