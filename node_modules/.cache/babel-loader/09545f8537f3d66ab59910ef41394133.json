{"remainingRequest":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/vueTool/src/views/Attempt/SummaryVue/Observable/observable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/vueTool/src/views/Attempt/SummaryVue/Observable/observable.vue","mtime":1598518085494},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js","mtime":1565602921100}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/vueTool/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { store, mutations } from \"./store\";\nimport { postImportIndexValueBatch, postImportIndexLayerCode } from \"@/api\";\nexport default {\n  // 组件名称\n  name: \"demo\",\n  // 组件参数 接收来自父组件的数据\n  props: {\n    type: String,\n    default: function _default() {\n      return \"\";\n    }\n  },\n  // 局部注册的组件\n  components: {},\n  // 组件状态值\n  data: function data() {\n    return {\n      name1: \"测试界面\"\n    };\n  },\n  // 计算属性\n  computed: {\n    count: function count() {\n      return store.count;\n    },\n    name: function name() {\n      return store.name;\n    }\n  },\n  // 侦听器\n  watch: {},\n  // 组件方法\n  methods: {\n    setCount: function setCount() {\n      mutations.setCount(this.count - 1);\n    },\n    changeName: function changeName() {\n      mutations.changeName(this.name1);\n    },\n    handleFileChoose: function () {\n      var _handleFileChoose = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(e) {\n        var files, formData, uploadStatus;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                files = Array.from(e.target.files);\n                formData = new FormData();\n                files.forEach(function (file) {\n                  formData.append(\"files\", file);\n                });\n                _context.next = 5;\n                return postImportIndexLayerCode(\"1234\", formData);\n\n              case 5:\n                uploadStatus = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function handleFileChoose(_x) {\n        return _handleFileChoose.apply(this, arguments);\n      }\n\n      return handleFileChoose;\n    }()\n  },\n  // 以下是生命周期钩子   注：没用到的钩子请自行删除\n\n  /**\n   * 在实例初始化之后，组件属性计算之前，如data属性等\n   */\n  beforeCreate: function beforeCreate() {},\n\n  /**\n   * 组件实例创建完成，属性已绑定，但DOM还未生成，$ el属性还不存在\n   */\n  created: function created() {},\n\n  /**\n   * 在挂载开始之前被调用：相关的 render 函数首次被调用。\n   */\n  beforeMount: function beforeMount() {},\n\n  /**\n   * el 被新创建的 vm.$ el 替换，并挂载到实例上去之后调用该钩子。\n   * 如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$ el 也在文档内。\n   */\n  mounted: function mounted() {},\n\n  /**\n   * 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n   * 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n   */\n  beforeUpdate: function beforeUpdate() {},\n\n  /**\n   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n   * 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n   */\n  updated: function updated() {},\n\n  /**\n   * keep-alive 组件激活时调用。 仅针对keep-alive 组件有效\n   */\n  activated: function activated() {},\n\n  /**\n   * keep-alive 组件停用时调用。 仅针对keep-alive 组件有效\n   */\n  deactivated: function deactivated() {},\n\n  /**\n   * 实例销毁之前调用。在这一步，实例仍然完全可用。\n   */\n  beforeDestroy: function beforeDestroy() {},\n\n  /**\n   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n   * 所有的事件监听器会被移除，所有的子实例也会被销毁。\n   */\n  destroyed: function destroyed() {}\n};",{"version":3,"sources":["observable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAA,KAAA,EAAA,SAAA;AACA,SAAA,yBAAA,EAAA,wBAAA,QAAA,OAAA;AACA,eAAA;AACA;AACA,EAAA,IAAA,EAAA,MAFA;AAGA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA,MADA;AAEA,IAAA,OAAA,EAAA;AAAA,aAAA,EAAA;AAAA;AAFA,GAJA;AAQA;AACA,EAAA,UAAA,EAAA,EATA;AAUA;AACA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,KAAA,EAAA;AADA,KAAA;AAGA,GAfA;AAgBA;AACA,EAAA,QAAA,EAAA;AACA,IAAA,KADA,mBACA;AACA,aAAA,KAAA,CAAA,KAAA;AACA,KAHA;AAIA,IAAA,IAJA,kBAIA;AACA,aAAA,KAAA,CAAA,IAAA;AACA;AANA,GAjBA;AAyBA;AACA,EAAA,KAAA,EAAA,EA1BA;AA2BA;AACA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,MAAA,SAAA,CAAA,QAAA,CAAA,KAAA,KAAA,GAAA,CAAA;AACA,KAHA;AAIA,IAAA,UAJA,wBAIA;AACA,MAAA,SAAA,CAAA,UAAA,CAAA,KAAA,KAAA;AACA,KANA;AAOA,IAAA,gBAPA;AAAA;AAAA;AAAA,+CAOA,CAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,gBAAA,KARA,GAQA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CARA;AASA,gBAAA,QATA,GASA,IAAA,QAAA,EATA;AAUA,gBAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,kBAAA,QAAA,CAAA,MAAA,CAAA,OAAA,EAAA,IAAA;AACA,iBAFA;AAVA;AAAA,uBAaA,wBAAA,CAAA,MAAA,EAAA,QAAA,CAbA;;AAAA;AAaA,gBAAA,YAbA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GA5BA;AA4CA;;AACA;;;AAGA,EAAA,YAhDA,0BAgDA,CAAA,CAhDA;;AAiDA;;;AAGA,EAAA,OApDA,qBAoDA,CAAA,CApDA;;AAqDA;;;AAGA,EAAA,WAxDA,yBAwDA,CAAA,CAxDA;;AAyDA;;;;AAIA,EAAA,OA7DA,qBA6DA,CAAA,CA7DA;;AA8DA;;;;AAIA,EAAA,YAlEA,0BAkEA,CAAA,CAlEA;;AAmEA;;;;AAIA,EAAA,OAvEA,qBAuEA,CAAA,CAvEA;;AAwEA;;;AAGA,EAAA,SA3EA,uBA2EA,CAAA,CA3EA;;AA4EA;;;AAGA,EAAA,WA/EA,yBA+EA,CAAA,CA/EA;;AAgFA;;;AAGA,EAAA,aAnFA,2BAmFA,CAAA,CAnFA;;AAoFA;;;;AAIA,EAAA,SAxFA,uBAwFA,CAAA;AAxFA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <button @click=\"setCount\">-1</button>\n    <div>store中count：{{count}}</div>\n    <button @click=\"changeName(name1)\">父页面修改name</button>\n    <div>store中name：{{name}}</div>\n\n    <div>\n      <input\n        name=\"fileInput\"\n        type=\"file\"\n        @change=\"handleFileChoose\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { store, mutations } from \"./store\";\nimport { postImportIndexValueBatch, postImportIndexLayerCode } from \"@/api\";\nexport default {\n  // 组件名称\n  name: \"demo\",\n  // 组件参数 接收来自父组件的数据\n  props: {\n    type: String,\n    default: () => \"\"\n  },\n  // 局部注册的组件\n  components: {},\n  // 组件状态值\n  data() {\n    return {\n      name1: \"测试界面\"\n    };\n  },\n  // 计算属性\n  computed: {\n    count() {\n      return store.count;\n    },\n    name() {\n      return store.name;\n    }\n  },\n  // 侦听器\n  watch: {},\n  // 组件方法\n  methods: {\n    setCount() {\n      mutations.setCount(this.count - 1);\n    },\n    changeName() {\n      mutations.changeName(this.name1);\n    },\n    async handleFileChoose(e) {\n      const files = Array.from(e.target.files);\n      const formData = new FormData();\n      files.forEach(file => {\n        formData.append(\"files\", file);\n      });\n      const uploadStatus = await postImportIndexLayerCode(\"1234\", formData);\n    }\n  },\n  // 以下是生命周期钩子   注：没用到的钩子请自行删除\n  /**\n   * 在实例初始化之后，组件属性计算之前，如data属性等\n   */\n  beforeCreate() {},\n  /**\n   * 组件实例创建完成，属性已绑定，但DOM还未生成，$ el属性还不存在\n   */\n  created() {},\n  /**\n   * 在挂载开始之前被调用：相关的 render 函数首次被调用。\n   */\n  beforeMount() {},\n  /**\n   * el 被新创建的 vm.$ el 替换，并挂载到实例上去之后调用该钩子。\n   * 如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$ el 也在文档内。\n   */\n  mounted() {},\n  /**\n   * 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n   * 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n   */\n  beforeUpdate() {},\n  /**\n   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n   * 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n   */\n  updated() {},\n  /**\n   * keep-alive 组件激活时调用。 仅针对keep-alive 组件有效\n   */\n  activated() {},\n  /**\n   * keep-alive 组件停用时调用。 仅针对keep-alive 组件有效\n   */\n  deactivated() {},\n  /**\n   * 实例销毁之前调用。在这一步，实例仍然完全可用。\n   */\n  beforeDestroy() {},\n  /**\n   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n   * 所有的事件监听器会被移除，所有的子实例也会被销毁。\n   */\n  destroyed() {}\n};\n</script>\n\n<style scoped lang=\"scss\">\n</style>\n"],"sourceRoot":"src/views/Attempt/SummaryVue/Observable"}]}