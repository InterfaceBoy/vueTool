{"remainingRequest":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js!/Users/heyuanpeng/个人项目/vueTool/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/httpRequest.js","dependencies":[{"path":"/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/httpRequest.js","mtime":1574824361613},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1567574714613}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/vueTool/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/heyuanpeng/\\u4E2A\\u4EBA\\u9879\\u76EE/vueTool/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 15:37:03\n * @LastEditors: 何元鹏\n * @LastEditTime: 2019-10-16 15:37:03\n * @Description: file content\n */\nimport axios from \"axios\";\n/**\n * @class HttpRequest\n * @param {Object} options { BASEURL, TIMEOUT }\n * @description 基于axios二次封装类，提供给不同地址实例使用\n * 目前有三个实例（基础，dataeye，mock），共用一种拦截器\n */\n\nvar HttpRequest =\n/*#__PURE__*/\nfunction () {\n  function HttpRequest(_ref) {\n    var BASEURL = _ref.BASEURL,\n        _ref$TIMEOUT = _ref.TIMEOUT,\n        TIMEOUT = _ref$TIMEOUT === void 0 ? 300000 : _ref$TIMEOUT;\n\n    _classCallCheck(this, HttpRequest);\n\n    this.config = {\n      baseURL: BASEURL,\n      timeout: TIMEOUT,\n      headers: {\n        \"Cache-Control\": \"no-cache\"\n      }\n    };\n    this.instance = axios.create(this.config); // 安装拦截器\n\n    this.interceptors();\n    return this.instance;\n  } // 拦截器\n\n\n  _createClass(HttpRequest, [{\n    key: \"interceptors\",\n    value: function interceptors() {\n      var instance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.instance;\n      // 请求拦截\n      instance.interceptors.request.use(function (config) {\n        // TODO: 未来请求可能需要加token\n        // if (store.getters.token) {\n        // 请求头携带token\n        //   config.headers[\"XZ-Token\"] = getToken();\n        // }\n        return config;\n      }, function (error) {\n        // 请求失败\n        Promise.reject(error);\n      }); // 响应拦截\n\n      instance.interceptors.response.use(function (response) {\n        var status = response.status;\n\n        if (status === 200) {\n          var data = response.data;\n          var code = data.code,\n              message = data.message; // TODO\n          // 后端约定状态码\n          // 服务器不发异常，需要手动判断捕获\n\n          if (code !== 1000) {\n            if (code == undefined) {\n              return Promise.resolve(data);\n            } else {\n              return Promise.reject(message);\n            }\n          }\n\n          return Promise.resolve(data);\n        } else {\n          // TODO: status不为200情况\n          return Promise.reject(status);\n        }\n      }, function (error) {\n        // axios捕获服务器异常\n        return Promise.reject(error.message);\n      });\n    }\n  }, {\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.instance;\n    }\n  }], [{\n    key: \"get\",\n    value: function get(url) {\n      return axios.get(url);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport { HttpRequest as default };",{"version":3,"sources":["/Users/heyuanpeng/个人项目/vueTool/src/plugins/axios/httpRequest.js"],"names":["axios","HttpRequest","BASEURL","TIMEOUT","config","baseURL","timeout","headers","instance","create","interceptors","request","use","error","Promise","reject","response","status","data","code","message","undefined","resolve","url","get"],"mappings":";;;AAAA;;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AACA;;;;;;;IAMqBC,W;;;AACnB,6BAA2C;AAAA,QAA7BC,OAA6B,QAA7BA,OAA6B;AAAA,4BAApBC,OAAoB;AAAA,QAApBA,OAAoB,6BAAV,MAAU;;AAAA;;AACzC,SAAKC,MAAL,GAAc;AACZC,MAAAA,OAAO,EAAEH,OADG;AAEZI,MAAAA,OAAO,EAAEH,OAFG;AAGZI,MAAAA,OAAO,EAAE;AACP,yBAAiB;AADV;AAHG,KAAd;AAOA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,MAAN,CAAa,KAAKL,MAAlB,CAAhB,CARyC,CASzC;;AACA,SAAKM,YAAL;AACA,WAAO,KAAKF,QAAZ;AACD,G,CACD;;;;;mCACuC;AAAA,UAA1BA,QAA0B,uEAAf,KAAKA,QAAU;AACrC;AACAA,MAAAA,QAAQ,CAACE,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAAAR,MAAM,EAAI;AACR;AACA;AACA;AACA;AACA;AACA,eAAOA,MAAP;AACD,OARH,EASE,UAAAS,KAAK,EAAI;AACP;AACAC,QAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACD,OAZH,EAFqC,CAgBrC;;AACAL,MAAAA,QAAQ,CAACE,YAAT,CAAsBM,QAAtB,CAA+BJ,GAA/B,CACE,UAAAI,QAAQ,EAAI;AAAA,YACFC,MADE,GACSD,QADT,CACFC,MADE;;AAEV,YAAIA,MAAM,KAAK,GAAf,EAAoB;AAAA,cACVC,IADU,GACDF,QADC,CACVE,IADU;AAAA,cAEVC,IAFU,GAEQD,IAFR,CAEVC,IAFU;AAAA,cAEJC,OAFI,GAEQF,IAFR,CAEJE,OAFI,EAGlB;AACA;AACA;;AACA,cAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,gBAAIA,IAAI,IAAIE,SAAZ,EAAuB;AACrB,qBAAOP,OAAO,CAACQ,OAAR,CAAgBJ,IAAhB,CAAP;AACD,aAFD,MAEO;AACL,qBAAOJ,OAAO,CAACC,MAAR,CAAeK,OAAf,CAAP;AACD;AACF;;AACD,iBAAON,OAAO,CAACQ,OAAR,CAAgBJ,IAAhB,CAAP;AACD,SAdD,MAcO;AACL;AACA,iBAAOJ,OAAO,CAACC,MAAR,CAAeE,MAAf,CAAP;AACD;AACF,OArBH,EAsBE,UAAAJ,KAAK,EAAI;AACP;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAK,CAACO,OAArB,CAAP;AACD,OAzBH;AA2BD;;;kCACa;AACZ,aAAO,KAAKZ,QAAZ;AACD;;;wBACUe,G,EAAK;AACd,aAAOvB,KAAK,CAACwB,GAAN,CAAUD,GAAV,CAAP;AACD;;;;;;SAjEkBtB,W","sourcesContent":["/*\n * @Author: 何元鹏\n * @Date: 2019-10-16 15:37:03\n * @LastEditors: 何元鹏\n * @LastEditTime: 2019-10-16 15:37:03\n * @Description: file content\n */\nimport axios from \"axios\";\n/**\n * @class HttpRequest\n * @param {Object} options { BASEURL, TIMEOUT }\n * @description 基于axios二次封装类，提供给不同地址实例使用\n * 目前有三个实例（基础，dataeye，mock），共用一种拦截器\n */\nexport default class HttpRequest {\n  constructor({ BASEURL, TIMEOUT = 300000 }) {\n    this.config = {\n      baseURL: BASEURL,\n      timeout: TIMEOUT,\n      headers: {\n        \"Cache-Control\": \"no-cache\"\n      }\n    };\n    this.instance = axios.create(this.config);\n    // 安装拦截器\n    this.interceptors();\n    return this.instance;\n  }\n  // 拦截器\n  interceptors(instance = this.instance) {\n    // 请求拦截\n    instance.interceptors.request.use(\n      config => {\n        // TODO: 未来请求可能需要加token\n        // if (store.getters.token) {\n        // 请求头携带token\n        //   config.headers[\"XZ-Token\"] = getToken();\n        // }\n        return config;\n      },\n      error => {\n        // 请求失败\n        Promise.reject(error);\n      }\n    );\n    // 响应拦截\n    instance.interceptors.response.use(\n      response => {\n        const { status } = response;\n        if (status === 200) {\n          const { data } = response;\n          const { code, message } = data;\n          // TODO\n          // 后端约定状态码\n          // 服务器不发异常，需要手动判断捕获\n          if (code !== 1000) {\n            if (code == undefined) {\n              return Promise.resolve(data);\n            } else {\n              return Promise.reject(message);\n            }\n          }\n          return Promise.resolve(data);\n        } else {\n          // TODO: status不为200情况\n          return Promise.reject(status);\n        }\n      },\n      error => {\n        // axios捕获服务器异常\n        return Promise.reject(error.message);\n      }\n    );\n  }\n  getInstance() {\n    return this.instance;\n  }\n  static get(url) {\n    return axios.get(url);\n  }\n}\n"]}]}