{"remainingRequest":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-easytable/libs/v-dropdown/src/dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-easytable/libs/v-dropdown/src/dropdown.vue","mtime":1573543942417},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js","mtime":1565602921100}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport settings from '../../src/settings/settings.js'\nimport clickoutside from '../../src/directives/clickoutside.js'\n\nimport VCheckboxGroup from '../../v-checkbox-group/index'\nimport VCheckbox from '../../v-checkbox/index'\n\nimport layerAdjustment from '../../src/mixins/layerAdjustment.js'\n\nexport default {\n    name: 'v-dropdown',\n    components: {\n        VCheckboxGroup, VCheckbox\n    },\n    mixins: [layerAdjustment],\n    directives: {\n        'click-outside': clickoutside\n    },\n    data(){\n        return {\n\n            visible: false,\n\n            internalOptions: [],\n\n            // checkboxGroup 选中的项\n            checkboxGroupList: [],\n\n            // 样式前缀\n            textAlignPrefix: 'v-dropdown-items-li-a-',\n\n            inputValue: '',\n\n            // 是否有选项被改变（初始值为null 为了区分首次internalOptions 赋值的问题）\n            isOperationChange:null\n        }\n    },\n    props: {\n        // 如果是select 组件将特殊处理\n        isSelect:{\n            type:Boolean,\n            default:false\n        },\n        showOperation:{\n            type:Boolean,\n            default:false\n        },\n        size: {\n            type: String\n        },\n\n        width: {\n            type: Number,\n            default: 90\n\n        },\n\n        // select的最大宽度(超出隐藏)\n        maxWidth: {\n            type: Number\n        },\n\n        // 如果为true 会包含 checkbox\n        isMultiple: {\n            type: Boolean,\n            default: false\n        },\n\n        // 用户传入v-model 的值 [{value/label/selected}]\n        value: [Object, Array],\n\n        // 占位符\n        placeholder: {\n            type: String,\n            default: '请选择',\n            validator: function (value) {\n                return value.length > 0\n            }\n        },\n\n        // 文本居中方式 left|center|right\n        textAlign: {\n            type: String,\n            default: 'left'\n        },\n\n        // 最小选中数量\n        min: {\n            type: Number,\n            default: 0\n        },\n\n        // 最大选中数量\n        max: {\n            type: Number,\n            default: 999\n        },\n\n        // 是否支持输入input\n        isInput: {\n            type: Boolean,\n            default: false\n        }\n\n    },\n    computed: {\n\n        sizeClass(){\n            let size = settings.sizeMaps[this.size] || settings.sizeMapDefault\n            return size === settings.sizeMaps['large'] ? ' v-dropdown--large' : (size === settings.sizeMaps['middle'] ? ' v-dropdown--middle' : ' v-dropdown--small')\n        },\n\n        // 获取最大宽度(不设置则是无穷大)\n        getMaxWidth(){\n            var result = Infinity,\n                maxWidth = this.maxWidth,\n                width = this.width;\n\n            if (maxWidth && maxWidth > 0 && maxWidth > width) {\n\n                result = maxWidth;\n            }\n\n            return result;\n        }\n    },\n    methods: {\n\n        // 初始化\n        init(){\n            this.internalOptions = Object.assign([], this.value);\n\n            this.checkboxGroupList = this.selectedLabels();\n\n            if (this.isInput) {\n\n                this.setInputValue();\n            }\n        },\n\n        // operation filter confirm\n        confirm(){\n\n            if (this.isOperationChange){\n\n                this.$emit('on-filter-method',this.internalOptions);\n                this.isOperationChange = false;\n            }\n            this.hideDropDown();\n        },\n\n        // operation filter reset\n        rest(){\n\n            if (this.internalOptions.some(x=>x.selected)){\n\n                this.internalOptions.map(x=>{\n\n                    if (x.selected){\n                        x.selected = false;\n                    }\n                    return x;\n                })\n\n                this.checkboxGroupList = [];\n\n                // 使用户传入的v-model 生效\n                this.$emit('input', this.internalOptions);\n\n                this.$emit('change');\n\n                // 修复执行两次的bug\n                /*this.$emit('on-filter-method',this.internalOptions);\n\n                this.isOperationChange = false;*/\n            }\n\n            setTimeout(x=>{\n\n                this.hideDropDown();\n            },50)\n        },\n\n        hideDropDown(){\n\n            if (this.showOperation && this.isOperationChange){\n\n                this.$emit('on-filter-method',this.internalOptions);\n                this.isOperationChange = false;\n            }\n\n            this.visible = false;\n        },\n\n        showDropDown(){\n\n            this.visible = true;\n        },\n\n        // 设置文本框的值\n        setInputValue(){\n\n            var result, labels;\n\n            labels = this.selectedLabels();\n            if (Array.isArray(labels) && labels.length > 0) {\n                result = labels.join();\n            }\n\n            this.inputValue = result;\n        },\n\n        // checkbox 选中改变事件\n        checkboxGroupChange(){\n\n            this.selectOptionClick();\n        },\n\n        toggleItems(){\n\n            //this.visible = !this.visible;\n\n            if (this.visible) {\n\n                this.hideDropDown();\n\n            }else{\n\n                this.showDropDown();\n\n                this.$nextTick(x => {\n                    this.dropDownClick()\n                })\n            }\n        },\n\n        selectOptionClick(item){\n            if (!this.isMultiple) {\n                this.internalOptions.map((x) => {\n\n                    if (item.label === x.label) {\n                        x.selected = true;\n                    } else {\n                        x.selected = false;\n                    }\n                    return x;\n                })\n            } else { // 多选\n                this.internalOptions.map((x) => {\n\n                    if (this.checkboxGroupList.includes(x.label)) {\n                        x.selected = true;\n                    } else {\n                        x.selected = false;\n                    }\n                    return x;\n                })\n            }\n\n            if (!this.isMultiple) {\n                this.toggleItems();\n            }\n\n            if (this.isInput) {\n\n                this.setInputValue();\n            }\n\n            // 使用户传入的v-model 生效\n            this.$emit('input', this.internalOptions);\n\n            this.$emit('change');\n        },\n\n        // 获取样式名称\n        getTextAlignClass(){\n\n            return this.textAlignPrefix + this.textAlign;\n\n        },\n\n        // 当前选中项的label\n        selectedLabels(){\n\n            return this.internalOptions.filter(x => x.selected).map(x => {\n\n                if (x.selected) {\n                    return x.label;\n                }\n            });\n        },\n\n        clickOutside(){\n\n            this.hideDropDown();\n            //this.visible = false\n        },\n\n        // 下拉点击显示\n        dropDownClick(){\n\n            var dtEle = this.$el.querySelector('.v-dropdown-dt'),\n                ddItem = this.$el.querySelector('.v-dropdown-items');\n            this.layerAdjustmentOnce(ddItem, dtEle, 2);\n            return false;\n        },\n\n        // 确定下拉框的位置\n        dropdownAdjust(){\n\n            var dtEle = this.$el.querySelector('.v-dropdown-dt'),\n                ddItem = this.$el.querySelector('.v-dropdown-items');\n            this.layerAdjustmentBind(ddItem, dtEle, 2);\n        }\n\n    },\n\n    created(){\n\n        this.init();\n    },\n    mounted(){\n\n        this.dropdownAdjust();\n\n    },\n    watch: {\n        'value': function (val) {\n            this.init();\n        },\n        'internalOptions':function (val) {\n\n            this.isOperationChange = (this.showOperation && this.isOperationChange !== null) ? true :false;\n        }\n    }\n}\n",{"version":3,"sources":["dropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"dropdown.vue","sourceRoot":"node_modules/vue-easytable/libs/v-dropdown/src","sourcesContent":["<template>\r\n    <dl :class=\"['v-dropdown',sizeClass]\" v-click-outside=\"clickOutside\">\r\n        <dt class=\"v-dropdown-dt\">\r\n            <a :class=\"[isSelect ? 'v-dropdown-selected' :'']\" @click.stop.prevent=\"toggleItems()\" :style=\"{'width':width+'px'}\">\r\n                <slot></slot>\r\n            </a>\r\n        </dt>\r\n        <dd v-show=\"visible\" class=\"v-dropdown-dd\">\r\n            <ul class=\"v-dropdown-items\" :style=\"{'min-width':width+'px','max-width':getMaxWidth+'px'}\">\r\n\r\n                <template v-if=\"isMultiple\">\r\n                    <v-checkbox-group is-vertical-show\r\n                                      :min=\"min\"\r\n                                      :max=\"max\"\r\n                                      @change=\"checkboxGroupChange\"\r\n                                      v-model=\"checkboxGroupList\"\r\n                    >\r\n                        <li v-for=\"item in internalOptions\"\r\n                            :class=\"['v-dropdown-items-multiple',getTextAlignClass()]\"\r\n                        >\r\n                            <v-checkbox :key=\"item.label\" :label=\"item.label\"\r\n                                        :showLine=\"item.showLine\"></v-checkbox>\r\n                        </li>\r\n                    </v-checkbox-group>\r\n                </template>\r\n                <template v-else>\r\n                    <li v-for=\"item in internalOptions\" @click.stop=\"selectOptionClick(item)\"\r\n                        :class=\"['v-dropdown-items-li',item.selected ? 'active' : '']\">\r\n                        <a :class=\"['v-dropdown-items-li-a',getTextAlignClass()]\" href=\"javascript:void(0);\">{{item.label}}</a>\r\n                    </li>\r\n                </template>\r\n\r\n                <li v-if=\"showOperation\" class=\"v-dropdown-operation\">\r\n                    <a @click.stop=\"confirm\" class=\"v-dropdown-operation-item\" href=\"javascript:void(0)\">确认</a>\r\n                    <a @click.stop=\"rest\" class=\"v-dropdown-operation-item\" href=\"javascript:void(0)\">重置</a>\r\n                </li>\r\n            </ul>\r\n        </dd>\r\n    </dl>\r\n</template>\r\n\r\n<script>\r\n    import settings from '../../src/settings/settings.js'\r\n    import clickoutside from '../../src/directives/clickoutside.js'\r\n\r\n    import VCheckboxGroup from '../../v-checkbox-group/index'\r\n    import VCheckbox from '../../v-checkbox/index'\r\n\r\n    import layerAdjustment from '../../src/mixins/layerAdjustment.js'\r\n\r\n    export default {\r\n        name: 'v-dropdown',\r\n        components: {\r\n            VCheckboxGroup, VCheckbox\r\n        },\r\n        mixins: [layerAdjustment],\r\n        directives: {\r\n            'click-outside': clickoutside\r\n        },\r\n        data(){\r\n            return {\r\n\r\n                visible: false,\r\n\r\n                internalOptions: [],\r\n\r\n                // checkboxGroup 选中的项\r\n                checkboxGroupList: [],\r\n\r\n                // 样式前缀\r\n                textAlignPrefix: 'v-dropdown-items-li-a-',\r\n\r\n                inputValue: '',\r\n\r\n                // 是否有选项被改变（初始值为null 为了区分首次internalOptions 赋值的问题）\r\n                isOperationChange:null\r\n            }\r\n        },\r\n        props: {\r\n            // 如果是select 组件将特殊处理\r\n            isSelect:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            showOperation:{\r\n                type:Boolean,\r\n                default:false\r\n            },\r\n            size: {\r\n                type: String\r\n            },\r\n\r\n            width: {\r\n                type: Number,\r\n                default: 90\r\n\r\n            },\r\n\r\n            // select的最大宽度(超出隐藏)\r\n            maxWidth: {\r\n                type: Number\r\n            },\r\n\r\n            // 如果为true 会包含 checkbox\r\n            isMultiple: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n\r\n            // 用户传入v-model 的值 [{value/label/selected}]\r\n            value: [Object, Array],\r\n\r\n            // 占位符\r\n            placeholder: {\r\n                type: String,\r\n                default: '请选择',\r\n                validator: function (value) {\r\n                    return value.length > 0\r\n                }\r\n            },\r\n\r\n            // 文本居中方式 left|center|right\r\n            textAlign: {\r\n                type: String,\r\n                default: 'left'\r\n            },\r\n\r\n            // 最小选中数量\r\n            min: {\r\n                type: Number,\r\n                default: 0\r\n            },\r\n\r\n            // 最大选中数量\r\n            max: {\r\n                type: Number,\r\n                default: 999\r\n            },\r\n\r\n            // 是否支持输入input\r\n            isInput: {\r\n                type: Boolean,\r\n                default: false\r\n            }\r\n\r\n        },\r\n        computed: {\r\n\r\n            sizeClass(){\r\n                let size = settings.sizeMaps[this.size] || settings.sizeMapDefault\r\n                return size === settings.sizeMaps['large'] ? ' v-dropdown--large' : (size === settings.sizeMaps['middle'] ? ' v-dropdown--middle' : ' v-dropdown--small')\r\n            },\r\n\r\n            // 获取最大宽度(不设置则是无穷大)\r\n            getMaxWidth(){\r\n                var result = Infinity,\r\n                    maxWidth = this.maxWidth,\r\n                    width = this.width;\r\n\r\n                if (maxWidth && maxWidth > 0 && maxWidth > width) {\r\n\r\n                    result = maxWidth;\r\n                }\r\n\r\n                return result;\r\n            }\r\n        },\r\n        methods: {\r\n\r\n            // 初始化\r\n            init(){\r\n                this.internalOptions = Object.assign([], this.value);\r\n\r\n                this.checkboxGroupList = this.selectedLabels();\r\n\r\n                if (this.isInput) {\r\n\r\n                    this.setInputValue();\r\n                }\r\n            },\r\n\r\n            // operation filter confirm\r\n            confirm(){\r\n\r\n                if (this.isOperationChange){\r\n\r\n                    this.$emit('on-filter-method',this.internalOptions);\r\n                    this.isOperationChange = false;\r\n                }\r\n                this.hideDropDown();\r\n            },\r\n\r\n            // operation filter reset\r\n            rest(){\r\n\r\n                if (this.internalOptions.some(x=>x.selected)){\r\n\r\n                    this.internalOptions.map(x=>{\r\n\r\n                        if (x.selected){\r\n                            x.selected = false;\r\n                        }\r\n                        return x;\r\n                    })\r\n\r\n                    this.checkboxGroupList = [];\r\n\r\n                    // 使用户传入的v-model 生效\r\n                    this.$emit('input', this.internalOptions);\r\n\r\n                    this.$emit('change');\r\n\r\n                    // 修复执行两次的bug\r\n                    /*this.$emit('on-filter-method',this.internalOptions);\r\n\r\n                    this.isOperationChange = false;*/\r\n                }\r\n\r\n                setTimeout(x=>{\r\n\r\n                    this.hideDropDown();\r\n                },50)\r\n            },\r\n\r\n            hideDropDown(){\r\n\r\n                if (this.showOperation && this.isOperationChange){\r\n\r\n                    this.$emit('on-filter-method',this.internalOptions);\r\n                    this.isOperationChange = false;\r\n                }\r\n\r\n                this.visible = false;\r\n            },\r\n\r\n            showDropDown(){\r\n\r\n                this.visible = true;\r\n            },\r\n\r\n            // 设置文本框的值\r\n            setInputValue(){\r\n\r\n                var result, labels;\r\n\r\n                labels = this.selectedLabels();\r\n                if (Array.isArray(labels) && labels.length > 0) {\r\n                    result = labels.join();\r\n                }\r\n\r\n                this.inputValue = result;\r\n            },\r\n\r\n            // checkbox 选中改变事件\r\n            checkboxGroupChange(){\r\n\r\n                this.selectOptionClick();\r\n            },\r\n\r\n            toggleItems(){\r\n\r\n                //this.visible = !this.visible;\r\n\r\n                if (this.visible) {\r\n\r\n                    this.hideDropDown();\r\n\r\n                }else{\r\n\r\n                    this.showDropDown();\r\n\r\n                    this.$nextTick(x => {\r\n                        this.dropDownClick()\r\n                    })\r\n                }\r\n            },\r\n\r\n            selectOptionClick(item){\r\n                if (!this.isMultiple) {\r\n                    this.internalOptions.map((x) => {\r\n\r\n                        if (item.label === x.label) {\r\n                            x.selected = true;\r\n                        } else {\r\n                            x.selected = false;\r\n                        }\r\n                        return x;\r\n                    })\r\n                } else { // 多选\r\n                    this.internalOptions.map((x) => {\r\n\r\n                        if (this.checkboxGroupList.includes(x.label)) {\r\n                            x.selected = true;\r\n                        } else {\r\n                            x.selected = false;\r\n                        }\r\n                        return x;\r\n                    })\r\n                }\r\n\r\n                if (!this.isMultiple) {\r\n                    this.toggleItems();\r\n                }\r\n\r\n                if (this.isInput) {\r\n\r\n                    this.setInputValue();\r\n                }\r\n\r\n                // 使用户传入的v-model 生效\r\n                this.$emit('input', this.internalOptions);\r\n\r\n                this.$emit('change');\r\n            },\r\n\r\n            // 获取样式名称\r\n            getTextAlignClass(){\r\n\r\n                return this.textAlignPrefix + this.textAlign;\r\n\r\n            },\r\n\r\n            // 当前选中项的label\r\n            selectedLabels(){\r\n\r\n                return this.internalOptions.filter(x => x.selected).map(x => {\r\n\r\n                    if (x.selected) {\r\n                        return x.label;\r\n                    }\r\n                });\r\n            },\r\n\r\n            clickOutside(){\r\n\r\n                this.hideDropDown();\r\n                //this.visible = false\r\n            },\r\n\r\n            // 下拉点击显示\r\n            dropDownClick(){\r\n\r\n                var dtEle = this.$el.querySelector('.v-dropdown-dt'),\r\n                    ddItem = this.$el.querySelector('.v-dropdown-items');\r\n                this.layerAdjustmentOnce(ddItem, dtEle, 2);\r\n                return false;\r\n            },\r\n\r\n            // 确定下拉框的位置\r\n            dropdownAdjust(){\r\n\r\n                var dtEle = this.$el.querySelector('.v-dropdown-dt'),\r\n                    ddItem = this.$el.querySelector('.v-dropdown-items');\r\n                this.layerAdjustmentBind(ddItem, dtEle, 2);\r\n            }\r\n\r\n        },\r\n\r\n        created(){\r\n\r\n            this.init();\r\n        },\r\n        mounted(){\r\n\r\n            this.dropdownAdjust();\r\n\r\n        },\r\n        watch: {\r\n            'value': function (val) {\r\n                this.init();\r\n            },\r\n            'internalOptions':function (val) {\r\n\r\n                this.isOperationChange = (this.showOperation && this.isOperationChange !== null) ? true :false;\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}