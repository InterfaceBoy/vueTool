{"remainingRequest":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/heyuanpeng/个人项目/vueTool/src/views/Attempt/SummaryVue/Observable/observable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/heyuanpeng/个人项目/vueTool/src/views/Attempt/SummaryVue/Observable/observable.vue","mtime":1592905834661},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/babel-loader/lib/index.js","mtime":1565602919806},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/cache-loader/dist/cjs.js","mtime":1567574739571},{"path":"/Users/heyuanpeng/个人项目/vueTool/node_modules/vue-loader/lib/index.js","mtime":1565602921100}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { store, mutations } from \"./store\";\nexport default {\n  // 组件名称\n  name: \"demo\",\n  // 组件参数 接收来自父组件的数据\n  props: {\n    type: String,\n    default: () => \"\"\n  },\n  // 局部注册的组件\n  components: {},\n  // 组件状态值\n  data() {\n    return {\n      name1: \"测试界面\"\n    };\n  },\n  // 计算属性\n  computed: {\n    count() {\n      return store.count;\n    },\n    name() {\n      return store.name;\n    }\n  },\n  // 侦听器\n  watch: {},\n  // 组件方法\n  methods: {\n    setCount() {\n      mutations.setCount(this.count - 1);\n    },\n    changeName() {\n      return mutations.changeName;\n    }\n  },\n  // 以下是生命周期钩子   注：没用到的钩子请自行删除\n  /**\n   * 在实例初始化之后，组件属性计算之前，如data属性等\n   */\n  beforeCreate() {},\n  /**\n   * 组件实例创建完成，属性已绑定，但DOM还未生成，$ el属性还不存在\n   */\n  created() {},\n  /**\n   * 在挂载开始之前被调用：相关的 render 函数首次被调用。\n   */\n  beforeMount() {},\n  /**\n   * el 被新创建的 vm.$ el 替换，并挂载到实例上去之后调用该钩子。\n   * 如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$ el 也在文档内。\n   */\n  mounted() {},\n  /**\n   * 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n   * 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n   */\n  beforeUpdate() {},\n  /**\n   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n   * 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n   */\n  updated() {},\n  /**\n   * keep-alive 组件激活时调用。 仅针对keep-alive 组件有效\n   */\n  activated() {},\n  /**\n   * keep-alive 组件停用时调用。 仅针对keep-alive 组件有效\n   */\n  deactivated() {},\n  /**\n   * 实例销毁之前调用。在这一步，实例仍然完全可用。\n   */\n  beforeDestroy() {},\n  /**\n   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n   * 所有的事件监听器会被移除，所有的子实例也会被销毁。\n   */\n  destroyed() {}\n};\n",{"version":3,"sources":["observable.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"observable.vue","sourceRoot":"src/views/Attempt/SummaryVue/Observable","sourcesContent":["<template>\n  <div class=\"container\">\n    <button @click=\"setCount\">-1</button>\n    <div>store中count：{{count}}</div>\n    <button @click=\"changeName(name1)\">父页面修改name</button>\n    <div>store中name：{{name}}</div>\n  </div>\n</template>\n\n<script>\nimport { store, mutations } from \"./store\";\nexport default {\n  // 组件名称\n  name: \"demo\",\n  // 组件参数 接收来自父组件的数据\n  props: {\n    type: String,\n    default: () => \"\"\n  },\n  // 局部注册的组件\n  components: {},\n  // 组件状态值\n  data() {\n    return {\n      name1: \"测试界面\"\n    };\n  },\n  // 计算属性\n  computed: {\n    count() {\n      return store.count;\n    },\n    name() {\n      return store.name;\n    }\n  },\n  // 侦听器\n  watch: {},\n  // 组件方法\n  methods: {\n    setCount() {\n      mutations.setCount(this.count - 1);\n    },\n    changeName() {\n      return mutations.changeName;\n    }\n  },\n  // 以下是生命周期钩子   注：没用到的钩子请自行删除\n  /**\n   * 在实例初始化之后，组件属性计算之前，如data属性等\n   */\n  beforeCreate() {},\n  /**\n   * 组件实例创建完成，属性已绑定，但DOM还未生成，$ el属性还不存在\n   */\n  created() {},\n  /**\n   * 在挂载开始之前被调用：相关的 render 函数首次被调用。\n   */\n  beforeMount() {},\n  /**\n   * el 被新创建的 vm.$ el 替换，并挂载到实例上去之后调用该钩子。\n   * 如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$ el 也在文档内。\n   */\n  mounted() {},\n  /**\n   * 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n   * 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n   */\n  beforeUpdate() {},\n  /**\n   * 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n   * 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n   */\n  updated() {},\n  /**\n   * keep-alive 组件激活时调用。 仅针对keep-alive 组件有效\n   */\n  activated() {},\n  /**\n   * keep-alive 组件停用时调用。 仅针对keep-alive 组件有效\n   */\n  deactivated() {},\n  /**\n   * 实例销毁之前调用。在这一步，实例仍然完全可用。\n   */\n  beforeDestroy() {},\n  /**\n   * Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，\n   * 所有的事件监听器会被移除，所有的子实例也会被销毁。\n   */\n  destroyed() {}\n};\n</script>\n\n<style scoped lang=\"scss\">\n</style>\n"]}]}